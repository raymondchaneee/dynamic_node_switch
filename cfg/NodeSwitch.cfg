#!/usr/bin/env python
PACKAGE = "dynamic_node_switch"
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
gen.add("online_mapping_mode",   bool_t,   0, "mapping mode, and auto turn on modules",  False)
# gen.add("offline_mapping_mode",   bool_t,   0, "mapping mode just rosbag recording",  False)
gen.add("new_map_name",    str_t,    0, "for mapping mode, to generate new map",  "")
gen.add("generate_map",   bool_t,   0, "for mapping mode, generate map",  False)

gen.add("navigation_mode",   bool_t,   0, "navigation mode, and auto turn on modules",  False)

map_enum = gen.enum([ gen.const("select_map",int_t, 0, "please select a map")],
                     "select a map for navigation mode")

gen.add("navigation_map", int_t, 0, "map selection", 0, 0, 100, edit_method=map_enum)


gen.add("output_command",    str_t,    0, "output of selection result",  "output result")
gen.add("navigation_module",   bool_t,   0, "navigation module on/off",  False)
gen.add("localization_module",   bool_t,   0, "localization module on/off",  False)
gen.add("lidar_module",   bool_t,   0, "lidar driver module on/off",  False)
gen.add("Go1_controller_module",   bool_t,   0, "Go1 base controller module on/off",  False)
gen.add("mapping_module",   bool_t,   0, "mapping module on/off",  False)
gen.add("urdf_module",   bool_t,   0, "urdf module on/off",  False)



exit(gen.generate(PACKAGE, "dynamic_node_switch", "NodeSwitch"))